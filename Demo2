import os
import sys
import time
import threading
import json

class Gameloop:
    def __init__(self, script_name="main.py"):
        self.script_name = script_name
        self.currentRoom = "None"
        self.roomsEntered = [self.currentRoom]
        self.roomEntryCounts = {'Trophy Room':0}
        self.inventory = []
        self.interactions = []
        self.input = ""
        self.monster = ""
        self.state = {self.currentRoom: "", self.roomsEntered: [], self.roomEntryCounts: {}, self.inventory: [], self.interactions: []}


    @staticmethod
    def save_game(state, filename="savegame.json"):
        try:
            with open(filename, "w") as file:
                json.dump(state, file, indent=4)
            print("Game saved successfully!")
        except Exception as e:
            print(f"An error occurred while saving the game: {e}")

    @staticmethod
    def load_game(filename="savegame.json"):
        try:
            with open(filename, "r") as file:
                state = json.load(file)
            print("Game loaded successfully!")
            return state
        except FileNotFoundError:
            print("No save file found. Starting a new game.")
            return None
        except Exception as e:
            print(f"An error occurred while loading the game: {e}")
            return None

    def open_new_terminal(self):
        if os.name == 'nt':  # Windows
            if self.script_name not in sys.argv:
                os.system(f'start cmd /k python {self.script_name}')
        elif os.name == 'posix':  # Linux, macOS
            if self.script_name not in sys.argv:
                os.system(f'xterm -e python {self.script_name} &')



    def user_input(self):
        print("What do you do?")
        self.input = input("> ").strip().lower()
        return self.input

    # Clear the terminal screen
    # Function is clear_screen()
    @staticmethod
    def clear_screen():
        # For Windows
        if os.name == 'nt':
            os.system('cls')
        # For macOS and Linux
        else:
            os.system('clear')

    # Room entrance tracker
    # Function to check if a room has been entered multiple times
    def check_room_event(self, room, moves_ago):
        # If for instance you're checking if a number is in the index -2 or further moves_ago needs to be 2.
        # Check the portion of the list before the last `moves_ago` items.

        cutoff = len(self.roomsEntered) - moves_ago
        if cutoff < 0:
            cutoff = 0  # Ensure no negative slicing.
        return room in self.roomsEntered[:cutoff]

    def proceed(self, room):
        # Record the player's entry into a new room
        self.currentRoom = room
        self.roomsEntered.append(room)
        # Update the room entry count
        if room not in self.roomEntryCounts:
            self.roomEntryCounts[room] = 0
        self.roomEntryCounts[room] += 1

    def add_to_inventory(self, item):
        self.inventory.append(item)

    def add_to_interactions(self, interaction):
        self.interactions.append(interaction)

    def get_current_room(self):
        return self.currentRoom

    def get_rooms_entered(self):
        return self.roomsEntered

    def monster(self):
        if len(G.roomsEntered) >= 70:
            self.monster = "Chimera"
            print("")
        else:
            self.monster = "Silas"
            print("")
        return self.monster

G = Gameloop()  # Create an instance of the Gameloop class
G.open_new_terminal()  # Call the method to open a new terminal

class ChaseGame:
    def __init__(self, start_time): #defining the base for variables
        self.time_left = start_time
        self.is_caught = False
        self.timer_thread = None
        self.lock = threading.Lock()
        self.turns_taken = 0 #based number for turns
        self.monster = ()


    def add_time(self, seconds):
        self.time_left += seconds
        print(f"{seconds} seconds added!")

    def subtract_time(self, seconds):
        self.time_left -= seconds
        if self.time_left < 0:
            self.time_left = 0
        print(f"{seconds} seconds subtracted!")

    def show_time(self):
        mins, secs = divmod(self.time_left, 60)
        print(f"Time left: {mins:02}:{secs:02}", end="\r")

    def start_chase(self):
        while self.time_left > 0:
            self.show_time()
            time.sleep(1)
            self.time_left -= 1
            if self.time_left == 0:
                self.is_caught = True
                break


        if self.is_caught:
            print("You're thrown to the ground", G.monster, "hovers over you and raises their hand, everything goes black")
        else:
            if G.monster=="Chimera":
                print("You run out the front and down the path from which you came,\n"
                      "from the woods you turn to see the front doors totally gone left with a singular wall and a familiar face from the 2nd story window.\n"
                      "you stop catching a breath then continue cautiously down the path")
            else:
                print("You run out the front and down the path from which you came,\n"
                        "from the woods you turn to see the front doors totally gone left with a singular wall and a familiar face from the 2nd story window.\n"
                        "You turn to your friend and smile he returns the smile with a look of relief and you both continue down the path together not ready to let each other go.")

    def start_timer_thread(self):
        self.timer_thread = threading.Thread(target=self.start_chase)
        self.timer_thread.daemon = True
        self.timer_thread.start()

def game_decisions(timer, stage=1):
    actions_stage_1 = {
        "1": {"action": "Scalpel", "time_change": 5,"response": "\nIt manages to scrape your foe not doing much for you"},
        "2": {"action": "Chair", "time_change": 15,"response": "\nIt hits them straight in the head leaving them temporarily dazed"},
        "3": {"action": "Blanket", "time_change": 10,"response": "\nIt covers their vision temporarily and they aggressively rip it off"},
    }

    actions_stage_2 = {
        "1": {"action": "Move shelf", "time_change": 20,"response": "\nYou shove the shelf in the way hoping to slow them down"},
        "2": {"action": "Speed up", "time_change": 5,"response": "\nThe adrenaline pumping through you accelerates you forward"},
        "3": {"action": "Throw tarp", "time_change": 30,"response": "\nYou grab a worn tarp and throw it up hoping to slow them down."},
    }

    actions_stage_3 = {
        "1": {"action": "Left", "time_change": 0,"response": "\nYou run down the hall to the left"},
        "2": {"action": "Right", "time_change": -5,"response": "\nYou pass by the creature from earlier who reaches out and attempts to grab you.\nDodging him leaving you with nothing but a scratch you continue to spring down the hall"},
    }

    actions_stage_4 = {
        "1": {"action": "Speed up", "time_change": 5,"response": "\nThe adrenaline pumping through you accelerates you forward"},
        "2": {"action": "Look ahead", "time_change": 0,"response": "\nYou bring yourself to a light jog and take a minute to look ahead"},
        "3": {"action": "Grab something", "time_change": 0,"response": "\nYou spot a tool not to far ahead and grab it"},
    }

    actions_stage_5 = {
        "1": {"action": "Run out", "time_change": 5,"response": "\nYou bolt out from the closet slamming the door behind you"},
        "2": {"action": "board off the basement", "time_change": 10,"response": "\nYou grab a spare piece of wood that would be used for a shelf and place it within the handle boarding off the basement and run out"},
        "3": {"action": "Grab supplies", "time_change": -5,"response": "\nYou spot some cleaning supplies and grab a mop. Is this actually useful?"},
    }

    actions_stage_6 = {
        "1": {"action": "Run out", "time_change": 5,"response": "\nYour anxiety makes itself known and compels you to leave"},
        "2": {"action": "Grab knife", "time_change": 10,"response": "\nYou sprint to the knife block and grab the largest knife then run out of the kitchen"},
        "3": {"action": "Attempt to shatter a window", "time_change": -5,"response": "\nYou pound your fist into the window hoping and pleading with the window that it breaks, it doesn’t"},
    }

    actions_stage_7 = {
        "1": {"action": "Throw chair", "time_change": 10,"response": "\nYou chuck the chair and hit them leaving them stunned and sprint out"},
        "2": {"action": "Push the table", "time_change": -5,"response": "\nYou attempt to ram the table into them, it being too heavy it does nothing for you and you sprint out in fear."},
        "3": {"action": "Sprint out", "time_change": 0,"response": "\nYou bolt out of the dining room not thinking twice"},
        "4": {"action": "Throw something", "time_change": 15,"response": "\nYou throw the knife/tool striking them right in the head and run ou"}
    }

    actions_stage_8 = {
        "1": {"action": "Run towards Game Room", "time_change": 0,"response": "\nRunning towards the game room the game room is no longer the game room but rather another long hall."},
        "2": {"action": "Attempt to run up the stairs", "time_change": -5,"response": "\nRunning towards the stairs you get knocked of your feet and into a long hall"},
        "3": {"action": "Bash the window", "time_change": -5,"response": "\nYou grab something and attempt to bash the window,it's no use."},
    }

    actions_stage_9 = {
        "1": {"action": "Speed up", "time_change": 5,"response": "\nThe adrenaline pumping through you accelerates you forward"},
        "2": {"action": "Turn around", "time_change": 20,"response": "\nYou see a figure running towards you at full speed fills you with adrenaline"},
        "3": {"action": "Throw something", "time_change": 0,"response": "\nYou choose to discard something random in your inventory, it misses"},
    }

    actions_stage_10 = {
        "1": {"action": "Speed up", "time_change": 5,"response": "\nThe adrenaline pumping through you accelerates you forward"},
        "2": {"action": "Knock over pallet", "time_change": 15,"response": "\nYou throw the pallet to the ground behind you slowing them down"},
        "3": {"action": "Keep running", "time_change": 10,"response": "\nYou keep running forward your longing for a escape fueling you"},
    }


    stage_texts = {
        1: "As you back away and reach closer and closer to a dead end your options become limited.\n As you look around the room there's various objects you can throw",
        2: "You sprint past them running down the long hall from which you came.\n You look ahead and see a couple options ahead of you.",
        3: "Sprinting down the hallway it starts moving back and forth and suddenly the path before you isn't so straight forward",
        4: "Finally reaching a clear space the hallway starts to straighten itself back out.",
        5: "Continuing forward you egress from the basement and end up in the supply closet.\n Hearing thudding and banging coming closer and closer.",
        6: "You stand within the kitchen taking in what's around you",
        7: "Standing on the far end of the dining room you look ahead and see a large figure within the entrance of the kitchen\n breathing furiously and heavily",
        8: "You stand in the main entry hall with the front door being blocked,\n you look upstairs and see them deformed with the creature standing at the top of them with a smile on his face",
        9: "The long familiar hallway only seems to be getting longer and longer as you hear aggressive huffing and thumping behind you only getting closer and closer.",
        10: "You think you can see the end of the hallway\n you also see some sort of pallet up ahead.",
    }

    stages = {
        1: actions_stage_1,
        2: actions_stage_2,
        3: actions_stage_3,
        4: actions_stage_4,
        5: actions_stage_5,
        6: actions_stage_6,
        7: actions_stage_7,
        8: actions_stage_8,
        9: actions_stage_9,
        10: actions_stage_10
    }

    while timer.time_left > 0:
        # Display narrative text between stages
        print("\n" + stage_texts.get(stage, ""))

        print("\n What do you do?:")
        actions = stages[stage]

        # Display the available actions for the current stage
        for key, value in actions.items():
            print(f"{key}. {value['action']}")

        choice = input("Enter your choice (1-4): ").strip()

        if choice in actions:
            print(f"\nYou chose to: {actions[choice]['action']}")
            time_change = actions[choice]["time_change"]
            if time_change > 0:
                timer.add_time(time_change)
            else:
                timer.subtract_time(abs(time_change))

            timer.turns_taken=+1
        else:
            print("\nInvalid choice, try again.")


        # Show updated time after decision
        timer.show_time()

        # Move to the next stage after a valid decision
        if stage == 1:
            stage = 2
        elif stage == 2:
            stage = 3
        elif stage == 3:
            stage = 4
        elif stage == 4:
            stage = 5
        elif stage == 5:
            stage = 6
        elif stage == 6:
            stage = 7
        elif stage == 7:
            stage = 8   #one ending here
        elif stage == 8:
            stage = 9
        elif stage == 9:
            stage = 10  #one ending here
        else:
            break

    timer.start_chase()

#Tell the player the commands at the beginning of the game
class Commands:
    def __init__(self):
        self.commands = ""

    def tell_commands(self):
        self.commands = "To = Allows you to move to the room or direction stated.\nExamine = Look at an object stated.\nInteract = Pick up or touch an object\nUse = use an object you have interacted with to collect\nOn = Prompted after Use; asks what you want to use your object on.\n\n\n"
        print(self.commands)
        print("Inventory =", G.inventory)

C = Commands()



#Greet at beginning of game
class Startup:
    def __init__(self):
        self.name = ""
    def ask_name(self):
        self.name = input("What is your name?\n")
    def greet(self):
        print(f"Dearest {self.name},\n"
              "\n"
              "It has been awhile since we last spoke, hasn't it? 10 years, I reckon.\n"
              "10 years too long. Not a day has gone by that I haven't wanted to speak to you,\n"
              "share an idea, a revelation, a new discovery, but nothing felt big enough…\n"
              "Nothing seems to warrant contacting you again, especially considering the terms of our last conversation.\n"
              "But this time I find myself having encountered something extraordinary.\n"
              "A development in my genetic research that could change our very world.\n"
              "And we are far too wise to hang on to old grudges when science is involved.\n"
              "\n"
              "So I invite you, old friend, to visit me at my mansion so we may discuss this new discovery.\n"
              "For I feel your input would be most valuable.\n"
              "I have attached the address to the back of this letter, along with some money to get you here.\n"
              "And if you can’t make it, keep it. But I do wish to see you again.\n"
              "\n"
              "Sincerely,\n"
              "\n"
              "Dr. Elias's Finch\n"
              "\n\n\n"
              "PRESS ENTER TO PROCEED")

S = Startup()



#Starting the Game
C.tell_commands()
print("PRESS ENTER TO PROCEED OR TYPE LOAD TO LOAD YOUR PREVIOUS GAME")
load_input = input().strip().lower()
if "load" in load_input:
    if __name__ == "__main__":
        G.load_game()
        print("Game loaded. \nCurrent Room:", G.currentRoom, "roomsEntered:", G.roomsEntered)
else:
    G.clear_screen()
    S.ask_name()
    G.clear_screen()
    S.greet()
    input()
    G.clear_screen()
    print("You stand before an entrance hall of cobble and wood.\nUnlike the rest of the house, the floors here are stone, with towering pillars of marble sprouting out.\nThe cobble walls crumble around you, spider webs seem to devour every dark corner of the room, and chunks of stone litter the ground.\nA single red carpet runs below your feet and up a grandiose spruce staircase, leading left and right.\nIts red fabric runs like fine wine flowing up to the landing.\n\n\nThe room is illuminated only by dim, flickering lanterns that hang from the ceiling. A wooden balcony overlooks the room you are in.\nYou clutch the note in your hand, then pocket it.\nThe room is eerily quiet, apart from the sound of your own short breathing and the creaking of the manor.\n\n\nTwo doors line the right wall, to the game room and lounge, and one sits on the left wall leading to a dining room.\n")
    G.proceed("Entrance Hall")

while True:
#Entrance Hall


    while G.currentRoom == "Entrance Hall":
        G.user_input()
        if "to landing" in G.input or "to stairs" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("Up the stairs there is a small alcove that branches into more rooms. \nFurther up is the balcony which overlooks the entrance hall. \n\n\nThere are doors to the master bedroom and a long hallway.\nThe balcony is mostly bare aside from \n")
            G.proceed("Upper Landing")
        elif "to game" in G.input or "to game room" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You enter the mansion's game room, immediately taking in the sharp aroma of alcohol and pool chalk. \nThe small square room has an open archway in the back that leads into a lounge. \n\n\nIn the front of the room lies a couch, a tv sitting on a stand across from it, buzzing static. \nA large red-felted pool table behind the couch displays a losing game of solids against stripes. \nA broken cue is discarded upon the table, snapped in half. \nA dartboard hangs from a wall behind the pool table, with some darts still scattered upon the floor and pinned into the wall.\n")
            G.proceed("Game Room")
        elif "to lounge" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You enter the lounge, the faint smell of firewood pricking your nose. \nScattered across the room, but all facing a central fireplace, are a few armchairs, a coffee table, and a large painting of what looks like Elias, but older. \n\n\nA door leads into the library and an archway opens up into the game room.\n")
            G.proceed("Lounge")
        elif "to dining" in G.input or "to dining room" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You enter the dining room. \nRich wooden floors and rugged stone walls line the room. \nA long, dark oak table stretches out in the center of the room, surrounded by carved wooden chairs. \nCandles hang along the wall and on the table, emanating an eerie glow. \n\n\nFood lines the table, the smell of meat and wine fills the air. \nAt the head of the table, sits a finished meal of steak and wine, and next to it, a half-eaten messy abomination of what you think used to be chicken, torn to shreds. \nA fresh apple sits alone among the mess, and a steak knife has fallen to the floor.\n")
            G.proceed("Dining Room")
        elif "examine pillar" in G.input:
            print("Large and crumbling ornate pillar supports the manor, carved with intricate patterns and words in another language.\n")
        elif "examine stone" in G.input:
            print("The large stones that litter the ground appear to have fallen from a large faded mural on the ceiling. \nYou can only make out the remains of a large star. \nSmaller stones sit akin to the large.\n")
        elif "examine door" in G.input:
            print("The mahogany door you came through towers over you. \nYou try to turn the large silver handle, but it doesn't budge. \nYou will need a key.\n")
        elif "examine carpet" in G.input:
            print("The carpet is old and worn, moreso in the areas that intersect the paths to the left and right doors. \nIt strikes you as odd, for Elias has always been a tidy man.\n")
        elif "interact stone" in G.input:
            if "Stone" not in G.inventory:
                print("You pick up a stone off the ground.\n")
                G.add_to_inventory("Stone")
            elif "Stone" in G.inventory:
                print("You already picked up the stone.\n")
        elif "quit" in G.input:
            G.save_game()
            break
        else:
            print("Invalid input, try something like 'to game room', 'examine stone', or 'interact door'.\n")

    while G.currentRoom == "Game Room":
        G.user_input()
        if "back" in G.input or "to entrance" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You go back into the entrance hall; the floors here are stone, with towering pillars of marble sprouting out.\nThe cobble walls crumble around you, spider webs seem to devour every dark corner of the room, and chunks of stone litter the ground.\nA single red carpet runs below your feet and up a grandiose spruce staircase, leading left and right.\nIts red fabric runs like fine wine flowing up to the landing.\n\n\nThe room is illuminated only by dim, flickering lanterns that hang from the ceiling. A wooden balcony overlooks the room you are in.\nThe room is eerily quiet, apart from the sound of your own short breathing and the creaking of the manor.\n\n\nTwo doors line the right wall, to the game room and lounge, and one sits on the left wall leading to a dining room.\n")
            G.proceed("Entrance Hall")
        elif "to lounge" in G.input or "to archway" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You enter the lounge, the faint smell of firewood pricking your nose. \nScattered across the room, but all facing a central fireplace, are a few armchairs, a coffee table, and a large painting of what looks like Elias, but older. \n\n\nA door leads into the library and an archway opens up into the game room behind you.\n")
            G.proceed("Lounge")
        elif "examine pool" in G.input or "examine table" in G.input:
            print("You see a game of pool, with stripes having an apparent winning position. You notice the 8 Ball is missing, and find it in one of the pockets. You look towards the broken cue. It seems like the solids player was having a bad day.")
        elif "interact cue" in G.input:
            if "Cue" not in G.inventory:
                print("You grab one of the broken halves of the pool cue.")
                G.add_to_inventory("Cue")
            elif "Cue" in G.inventory:
                print("You already picked up the cue.")
        elif "examine couch" in G.input:
            print("The couch is a deep maroon leather stitched with ivory. \nYou sit upon it, and surprisingly, you sink into it as if it were plush. \nYou feel like you tune on a good show and stay here for hours. \n")
        elif "examine tv" in G.input:
            print("A fancy black old television upon an ivory stand. \nIt displays a buzzing static.\n")
        elif "examine dart" in G.input or "examine board" in G.input:
            print("A large round dart board, a game of blue versus yellow. \nBlue has a dart in the green circle surrounding the bullseye, with one more in the red 18 section of the red and green inner ring, another in the white 15 inner ring section, and a final dart in the outer black 13 section. \nYellow has two darts immersed into the wall, and one bullseye.\n")
        elif "interact couch" in G.input:
            print("You rifle through the couch, and find a leaflet on the rules for darts, and a tv remote.")
        elif "interact remote" in G.input:
            if "Game Room Remote" not in G.interactions:
                print("You click the remote, and Frankenstein begins playing. \nYou watch as Victor shocks his creation, shouting his iconic line, 'It's Alive!'\n")
                G.add_to_interactions("Game Room Remote")
            elif "Game Room Remote" in G.interactions:
                print("You click the tv remote, turning it back to static.")
        elif "interact leaflet" in G.input or "interact rules" in G.input:
            if "Game Room Leaflet" not in G.interactions:
                print("You open the leaflet, it reads:\nPlayers should stand 7ft 9in from the dart board, with both feet on the ground. \nPlayers should hold the dart in their dominant hand, and throw it straight without too much force. \nThe dart board has 20 numbered sections, with the bullseye in the center. The bullseye's outer ring is worth 25 points, and the inner circle is worth 50 points. \nThe black and white outer and inner rings are worth the point value displayed, and the outer red and green ring is worth double points, while the inner is worth triple. \nPlayers take turns throwing 3 darts per turn. \nYou start with 501 points, and the goal is to reduce your score to zero, but the last dart thrown must land in a double or the bullseye.\n")
                G.add_to_interactions("Game Room Leaflet")
            elif "Game Room Leaflet" in G.interactions:
                print("")
        elif "quit" in G.input:
            G.save_game()
            break
        else:
            print("Invalid input, try something like 'to lounge', 'examine pool table', or 'interact cue'.\n")

    while G.currentRoom == "Lounge":
        G.user_input()
        if "back" in G.input or "to entrance" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You go back into the entrance hall, ")
            G.proceed("Entrance Hall")
        elif "to library" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("")
            G.proceed("Lower Library")
        elif "to game room" in G.input or "to archway" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("")
            G.proceed("Game Room")
        elif "examine fireplace" in G.input:
            if "Hedda Gabler Lever" in G.interactions:
                print("The fireplace is a classic gray brick, with a metal holder holding ashen wood, and a fire prod stuck inside. \n\n\nYou see behind the fireplace is an old lockbox with a combination lock. \nThere are colored tiles, Green, Black, Red, and White, with sliders to input numbers.\n")
                print("You may input any four numbers ranging from 1 to 99 in each slot with a space between each number. \nWhat would you like to input?\n")
                lockbox_input = input("> ")
                if "25 13 54 15" in lockbox_input:
                    print("You hear a click, and lift the lid of the box. Inside you find a small bronze key, and pocket it.\n")
                    G.add_to_inventory("Bronze Key")
                elif "25 13 54 15" not in lockbox_input:
                    print("The lockbox does not open.\n")
            elif "Hedda Gabler Lever" not in G.interactions:
                print("The fireplace is a classic gray brick, with a metal holder holding ashen wood, and a fire prod stuck inside. \nOddly, you see no vent to channel the smoke, and the fireplace seems more shallow than you would expect.\n")
        elif "examine painting" in G.input:
            print("As you walk closer, you notice the painting isn't actually of Elias, but rather of his Father, Silas. \nAlthough sitting regally in a fine armchair, he seems roughened up. Middle aged with a stubble covered face and crooked nose; he looks weary, this was probably painted close to his death.\n")
        elif "interact painting" in G.input:
            print("You lift up the painting, and a note falls to the ground. Picking it up to read, it simply says '6'.")
            G.add_to_inventory("Note: '6'")
        elif "interact prod" in G.input:
            print("As you pick up the fire prod, the weak metal turns to ash in your hands.\n")
        elif "examine armchair" in G.input:
            print("You scavenge through the armchairs, only finding some loose change and an old shopping list that reads:,\nBotany Book, Bucket, Painting, and Boar Head Mantle. \n")
        elif "examine table" in G.input:
            print("Scattered atop the coffee table are a variety of pages, appearing to be torn from various books. The table also seems to be burnt in areas, with holes pokes through some of the pages and through the table. The legible pages include: A ripped up children's book on learning to read, a page from Elias’s favorite book, “Hedda Gabler”, and an excerpt from the poem “On Being Human.” The except reads: Far richer they! I know the senses' witchery\nGuards us like air, from heavens too big to see;\nImminent death to man that barb'd sublimity\nAnd dazzling edge of beauty unsheathed would be.\nYet here, within this tiny, charmed interior,\nThis parlour of the brain, their Maker shares\nWith living men some secrets in a privacy\nForever ours, not theirs.\n")
        elif "quit" in G.input:
            G.save_game()
            break
        else:
            print("Invalid input, try ")

    while G.currentRoom == "Dining Room":
        G.user_input()
        if "" in G.input:
            print("")
        elif "quit" in G.input:
            G.save_game()
            break
        else:
            print("Invalid input, try ")

    while G.currentRoom == "Upper Landing":
        G.user_input()
        if "back" in G.input or "to entrance" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You go back down into the entrance hall; the floors here are stone, with towering pillars of marble sprouting out.\nThe cobble walls crumble around you, spider webs seem to devour every dark corner of the room, and chunks of stone litter the ground.\nA single red carpet runs below your feet and up a grandiose spruce staircase, leading left and right.\nIts red fabric runs like fine wine flowing up to the landing.\n\n\nThe room is illuminated only by dim, flickering lanterns that hang from the ceiling. A wooden balcony overlooks the room you are in.\nThe room is eerily quiet, apart from the sound of your own short breathing and the creaking of the manor.\n\n\nTwo doors line the right wall, to the game room and lounge, and one sits on the left wall leading to a dining room.\n")
            G.proceed("Entrance Hall")
        elif "to alcove" in G.input:
            G.clear_screen()
            C.tell_commands()
            print("You turn into the small hallway that parts from the stairs to find the trophy room. \nA few hunting trophies hang from high on the walls including: a lion, a deer, a wolf, and a boar.\nDoors leading to the servant's quarters and upper library are also found in the hallway.\n\n")
            if G.roomEntryCounts['Trophy Room'] == 0:
                print("A circular red carpet sits on the floor, and shelves full of gold and silver metal line the walls. You take note of a few awards: The Genetic Research Excellence Award for Elias Finch, The Genomic Innovation Award for Elias Finch, The Genetic Education and Outreach Award for Elias & Silas Finch, The Mendel Award for Silas Finch, and the Stem Cell Genetics Award for Silas Finch.\n")
            elif G.roomEntryCounts['Trophy Room'] == 1:
                print("A square red carpet lays down exhausted on the floor, shelves full of silver and gold metal line the walls. \nYou take note of a few awards: The Jean and Fabric Research Excellence Award for Elias Finch, The Genomal Innovation Award for Elias Finch, The Genetic Outreach Award for Silas Finch, The Mendel Award for Silas Finch, and the Mycology Award for Silas Finch. \nLittle mushrooms grow out of the Mycology award. \nYou feel a little lightheaded.\n")
            elif G.roomEntryCounts['Trophy Room'] == 2:
                print("A circular red mushroom cap grows out of the floor like a carpet, shelves full of gold, silver, and purple metal line the walls. \nYou take note of a few awards: The Deoxyribonucleic acid Award for Elias Hemlock, The Genome Intantiator Award for Elias Finch, The Genetic Mycology Award for Elias & Silas Finch, The Limb Splicer Award for Silas Finch, and the Medieval Torture Award for Silas Finch. \nMushrooms grow out of the trophies and the walls. \nYou feel lightheaded, a purple mist clouds your vision.\n")
            G.proceed("Trophy Room")
        elif "to master" in G.input or "to bedroom" in G.input:
            if "Bronze Key" in G.inventory:
                G.clear_screen()
                C.tell_commands()
                print("")
                G.proceed("Master Bedroom")
            elif "Bronze Key" not in G.inventory:
                print("You will need a key to enter this room.")
        elif "to long" in G.input or "to hallway" in G.input:
            if "Bronze Key" in G.inventory:
                G.clear_screen()
                C.tell_commands()
                print("")
                G.proceed("Long Hallway")
            elif "Bronze Key" not in G.inventory:
                print("You will need a key to enter this room.")
        elif "quit" in G.input:
            G.save_game()
            break
        else:
            print("Invalid input, try 'to hallway' or 'to master'.")

        while G.currentRoom == "Trophy Room":
            G.user_input()
            if "to servant's" in G.input or "to quarters" in G.input:
                G.clear_screen()
                C.tell_commands()
                print("")
                G.proceed("Servant's Quarters")
            elif "back" in G.input or "to landing" in G.input:
                G.clear_screen()
                C.tell_commands()
                print("")
                G.proceed("Upper Landing")
            elif "to library" in G.input or "to upper" in G.input:
                G.clear_screen()
                C.tell_commands()
                print("")
                G.proceed("Upper Library")
            elif "quit" in G.input:
                G.save_game()
                break
            else:
                print("Invalid input, try ")


